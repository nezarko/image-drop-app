  // useEffect(() => {
  //   if(!load) return ;

  //   if (dates.length === sectionsRef.current.length) {
  //     sectionsRef.current.forEach((section, index) => {
  //       //
  //       // convert to string 
  //       const images = section.querySelectorAll('.section-img') ;
  //       const posistions = [] ;
  //       images.forEach((img, index) => {

  //       //  const startRotation = getRandomRotation();
  //        const posistion = {
  //         y:0,
  //         x:0,
  //         r:getRandomRotation()+'deg'
  //        }
  //         // set postions of images in reciecer section according to index

  //         if (index > 140) {
  //           posistion.y = `${getRandomInt(50, 100)}px`;
  //           posistion.x = getRandomInt(600, window.innerWidth - 800)+'px'

  //           // img.style.setProperty('--y', `${getRandomInt(50, 100)}px`)
  //           //img.style.setProperty('--left', `${getRandomInt(600, window.innerWidth - 800)}px`)
  //           //img.style.setProperty('--rotation',`${getRandomRotation()}deg`)

  //         }else if(index >= 98 && index <= 140) {

  //           posistion.y = `${getRandomInt(100, 200)}px`;
  //           posistion.x = getRandomInt(400, window.innerWidth - 600)+'px'
  //           //img.style.setProperty('--left', `${getRandomInt(400, window.innerWidth - 600)}px`)
  //           //img.style.setProperty('--y', `${getRandomInt(100, 200)}px`)
  //           //img.style.setProperty('--rotation',`${getRandomRotation()}deg`)

  //         } else if (index >= 61 && index <= 97) {

  //           posistion.y = `${getRandomInt(200, 400)}px`;
  //           posistion.x = getRandomInt(300, window.innerWidth -400)+'px'
  //           // img.style.setProperty('--y', getRandomInt(200, 400) + 'px')
  //           // img.style.setProperty('--left', getRandomInt(300, window.innerWidth - 400) + 'px')
  //           // img.style.setProperty('--rotation', getRandomRotation() + 'deg')

  //         } else if (index >= 31 && index <= 60) {

  //           posistion.y = `${getRandomInt(400, 600)}px`;
  //           posistion.x = getRandomInt(200, window.innerWidth - 200)+'px'
  //           // img.style.setProperty('--y', getRandomInt(40, 600) + 'px')
  //           // img.style.setProperty('--left', getRandomInt(200, window.innerWidth - 200) + 'px')
  //           // img.style.setProperty('--rotation', getRandomRotation(50, 100) + 'deg')

  //         } else if (index < 30) {
  //           posistion.y = `${getRandomInt(600, 800)}px`;
  //           posistion.x = getRandomInt(0, window.innerWidth - 100)+'px'
  //           // img.style.setProperty('--y', getRandomInt(600, 800)+'px')
  //           // img.style.setProperty('--left', getRandomInt(0, window.innerWidth - 100)+"px")
  //           // img.style.setProperty('--rotation', getRandomRotation()+'deg')

  //         }
  //         posistions.push(posistion);
  //       }) ;

  //       // add images to cahce 

  //       // console.log(posistions);


  //       setSectionImagesPoisition(prev => ({
  //         ...prev,
  //         [`section_${index}`] : posistions
  //       }));


  //       console.log(section_imgs_position)



  //       // sectionImages.current[`section_${index}`] = Array.from(images) ;

  //       if(index === sectionsRef.current.length - 1) setLoad(!load)

  //     })


  //   }



  // }, [dates])


#########

// section

  // const startDate = new Date(new Date().getFullYear(), 9, 7);
  // const currentDate = new Date();
  // const [dates, setDates] = useState([]);
      const [numImages, setNumImages] = useState(
    // Math.floor(Math.random() * 51) + 70
    150
  );

  // useEffect(() => {
  //   const dateArray = [];
  //   let currentDatePointer = new Date(startDate);

  //   while (currentDatePointer <= currentDate) {
  //     dateArray.push(new Date(currentDatePointer));
  //     currentDatePointer.setDate(currentDatePointer.getDate() + 1);
  //     // setDates((prev) => [...prev , new Date(currentDatePointer)])
  //   }
  //   setDates(dateArray);
  // }, []);

              // setTimeout(() => {
              //   // const c = entry.target.querySelectorAll('.section-img');
              //   // document.getElementById('receiver-section').append(...c)
              //   document.getElementById('receiver-section').classList.add('rc-image-append');
              // }, 4000)
    
//

******
APP
******

// useLayoutEffect(() => {
  //   const fallImagesInSections = () => {
  //     if (sectionsContainerRef.current) {
  //       const sectionElements = sectionsContainerRef.current.querySelectorAll(".section");
  //       sectionElements.forEach((section, index) => {
  //         // const images = section.querySelectorAll('img');
  //         const images = section.querySelectorAll(".section-img");
  //         const rect = section.getBoundingClientRect();
  //         if (
  //           rect.top >= 0 &&
  //           rect.top < rect.height &&
  //           section.id !== "receiver-section"
  //         ) {
  //           fallFlowers(section);
  //         } else {
  //           // section.style.background = "red";
  //         }
  //       });
  //     }
  //   };

  //   window.addEventListener("scroll", fallImagesInSections);

  //   return () => window.removeEventListener('scroll' , fallImagesInSections)
  // }, []);

#########


// deperacted 

  const handleEnter = ({ currentTarget }) => {
    // cahce
    // console.log("inEnter")

    // aniamte ;
    gsap.set(currentTarget.querySelector(".tooltipContainer"), {
      zIndex: 2222,
    });
    gsap.set(currentTarget.querySelector(".tooltipContainer .wrapper"), {
      display: "block",
    });

    gsap.to(currentTarget.querySelector(".tooltipContainer .wrapper"), {
      opacity: 1,
      duration: 0.5,
    });
  };
  // TODO: extract each event aniamtion to a function

  const handleLeave = async ({ currentTarget }) => {
    // console.log("inLeave")
    const targets = [
      currentTarget.querySelector(".tooltipContainer"), // 0
      //currentTarget.querySelector('.popup-bg'), // 1
      //currentTarget.querySelector('.popup-text') // 2
    ];

    const wrapper = targets[0].querySelector(".wrapper");
    // aniamte ;
    const leave = (target) => {
      return gsap
        .to(target, {
          rotateY: 180,
          onComplete: () => {},
        })
        .then(($tween) => {
              //TODO: when mouse leave while animation not compete kill animation and revert changes applied as inline.
             const av =  gsap.to(target.querySelector('.avatar') , {
                  opacity: 1
              })
              gsap.delayedCall(2 , (target) => {
                 // set popup so it wont flush when changing the opacity of parent while changine
                 // opacity of wrapper it shows the first elmenet while changing
                const front =  gsap.set(target.querySelector('.front') , {
                  opacity: 0,
                 });
                  gsap.to(target,{
                   duration:.5,
                   y:100,
                   opacity:0,
                   clearProps:true
                 }).then(tween => {
                    front.revert();
                  //   av.revert()
                 })
          // revert tween default ;
          } , [target , $tween])
        });
    };

    const dellayLeave = await gsap.delayedCall(2, leave, [wrapper]);
  };





  .flower-scroll{
    position: absolute;
    top: 60%;
    left: 45%;
    background-color: black;
    color: aliceblue;
    font-size: medium;
    cursor: pointer; /* Change cursor to pointer on hover */
  }
  
  .flower-image {
    transform: rotate(20deg);
    font-size: large;
    font-weight: 600;
    width: 250px; /* Adjust the width to match the character */
    height: 300px; /* Automatically adjust the height based on the width */
    margin-right: 10px; /* Adjust the margin to your preference */
    filter: brightness(0.8) saturate(120%) contrast(120%); /* Add some decoration */
  }
  .flower-image2 {
    position: absolute;
    transform: rotate(10deg);
    font-size: small;
    width: 60px; /* Adjust the width to match the character */
    height: 60px; /* Automatically adjust the height based on the width */
    margin-right: 2px; /* Adjust the margin to your preference */
    filter: brightness(0.8) saturate(120%) contrast(120%); /* Add some decoration */
    cursor: pointer; /* Change cursor to pointer on hover */
    
  }
  
  /* Target the fourth character of .flower-container */
  .flower-container span:nth-child(4) {
    position: absolute;
    display: inline-block;
    transform: translate(110%, 5%);
    overflow: hidden;
    padding-left: 5px;
  }
  
  img {
    padding: 0;
    margin: 0;
  }
  

                  <svg
                    className="w-therd md-w-full lg-w-full"
                    height="auto"
                    viewBox="0 0 39 109"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                    style={{ "--apperance": 0 }}
                    id="svgEl"
                  >
                    {/* Animation enter */}

                    {/* Right in */}
                    <defs>
                      <linearGradient id="rLeaf-in">
                        <stop offset="0" stopColor="#8CC63F">
                          <animate
                            className="rLeaf-in"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#000">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Left In */}
                    <defs>
                      <linearGradient id="left-in">
                        <stop offset="0" stopColor="#8CC63F">
                          <animate
                            className="left-in"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#000">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Flower */}
                    <defs>
                      <linearGradient id="f-in">
                        <stop offset="0" stopColor="white">
                          <animate
                            className="f-in"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#000">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Red gradiant fill */}
                    <defs>
                      <linearGradient id="redFill">
                        <stop offset="0" stopColor="#EC1C24">
                          <animate
                            className="red-in"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#000">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Reversh animation */}
                    <defs>
                      <linearGradient id="l-out">
                        <stop offset="0" stopColor="#000">
                          <animate
                            className="l-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#8CC63F">
                          <animate
                            // className="l-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    <defs>
                      <linearGradient id="rLeaf-out">
                        <stop offset="0" stopColor="#000">
                          <animate
                            className="rLeaf-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#8CC63F">
                          <animate
                            // className="l-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Flower and red dot out animation */}
                    <defs>
                      <linearGradient id="red-dot-out">
                        <stop offset="0" stopColor="#000">
                          <animate
                            className="red-dot-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="#EC1C24">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* Flower Roses */}
                    <defs>
                      <linearGradient id="flower-out">
                        <stop offset="0" stopColor="#000">
                          <animate
                            className="flower-out"
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                        <stop offset="0" stopColor="white">
                          <animate
                            dur="1s"
                            attributeName="offset"
                            fill="freeze"
                            from="0"
                            to="1"
                            restart="always"
                            begin="indefinite"
                          />
                        </stop>
                      </linearGradient>
                    </defs>
                    {/* End flower and red dot out animation */}

                    <AnimatedSvgPath
                      play={play}
                      startColor="#8CC63F"  // this prop is changable 
                      endColor="#000"
                      from={0}
                      to={1}
                      begin="indefinite"
                      dur="1s"
                      fillid="leafIn"
                      d="M21.87 73.0996C21.87 70.1596 23.85 68.4996 24.95 65.8896C26.23 62.8396 27.1 59.6204 28.59 56.6504C29.99 53.8504 31.85 51.3702 33.46 48.7002C34.72 46.6102 36.65 44.9395 37.71 42.7695C36.93 44.3695 37.05 46.1899 36.9 47.9199C36.73 49.9299 36.44 51.9297 36.22 53.9297C35.92 56.5497 35.27 59.44 33.89 61.71C32.23 64.44 29.61 67.0598 26.65 68.3398C25.72 68.7398 24.7 69.0397 23.92 69.7197C23.19 70.3597 21.88 72.1296 21.88 73.0996H21.87Z"
                    />
                    {/* <path
                      className="leaf-right"
                      d="M21.87 73.0996C21.87 70.1596 23.85 68.4996 24.95 65.8896C26.23 62.8396 27.1 59.6204 28.59 56.6504C29.99 53.8504 31.85 51.3702 33.46 48.7002C34.72 46.6102 36.65 44.9395 37.71 42.7695C36.93 44.3695 37.05 46.1899 36.9 47.9199C36.73 49.9299 36.44 51.9297 36.22 53.9297C35.92 56.5497 35.27 59.44 33.89 61.71C32.23 64.44 29.61 67.0598 26.65 68.3398C25.72 68.7398 24.7 69.0397 23.92 69.7197C23.19 70.3597 21.88 72.1296 21.88 73.0996H21.87Z"
                      // fill="url(#leaf)"
                    /> */}
                    <path
                      className="leaf-left"
                      d="M23.3 60.8398C22.86 58.9398 21.19 58.42 19.62 58C17.74 57.49 16.29 56.42 14.79 55.21C12.38 53.26 10.45 50.73 9.09003 47.96C7.42003 44.55 5.93999 40.8001 4.92999 37.1201C4.23999 34.6201 2.50998 31.2498 0.539978 29.5098C4.00998 32.5698 7.35001 35.78 11.14 38.46C13.62 40.21 15.96 42.91 17.81 45.25C20.42 48.54 21.85 51.9095 22.53 56.0195C23 58.8995 23.74 61.3098 23.35 64.2598"
                      // fill="url(#leaf)"
                    />
                    <path
                      className="plant-stem"
                      d="M23.61 107.98C19.72 99.1705 20.21 87.2399 21.6 76.6699C22.97 66.2999 24.89 56.1202 24.11 45.4102C23.45 36.4102 21.1 27.3698 17.98 19.8398"
                      stroke="white"
                      strokeWidth="1.5"
                      strokeMiterlimit="10"
                    />
                    <path
                      className="flower-rose flower-leaf-1"
                      d="M23.6 18.5191C24.24 14.8291 27.23 11.8199 30.7 10.5299C32.22 9.95989 33.95 9.71942 35.47 10.2994C36.99 10.8794 38.21 12.4297 38.02 14.0397C37.9 15.0297 37.29 15.9197 36.51 16.5397C35.73 17.1597 34.79 17.5698 33.86 17.9098C30.63 19.1098 27.2 19.7592 23.76 19.8492"
                      // fill="white"
                    />
                    <path
                      className="flower-rose flower-leaf-2"
                      d="M20.98 14.5896C19.76 11.9096 19.44 8.81991 20.11 5.94991C20.51 4.19991 21.33 2.45983 22.76 1.36983C24.19 0.279832 26.34 2.75373e-05 27.79 1.07003C28.86 1.85003 29.39 3.20999 29.42 4.52999C29.45 5.84999 29.02 7.13956 28.48 8.33956C27.79 9.84956 26.9 11.2598 25.96 12.6198C24.94 14.0998 23.78 15.59 22.12 16.28"
                      // fill="white"
                    />
                    <path
                      className="flower-rose flower-leaf-3"
                      d="M17.56 17.8899C13.76 15.9699 10.07 13.4607 8.4 9.44067C7.91 8.26067 7.52995 6.9902 7.59995 5.7102C7.67995 4.4302 8.29 3.13047 9.4 2.49047C10.61 1.80047 12.19 2.02047 13.39 2.74047C14.59 3.46047 15.4599 4.61051 16.2199 5.78051C18.6299 9.51051 20.55 13.3604 18.95 17.7004"
                      // fill="white"
                    />
                    <path
                      className="flower-rose flower-lead-4"
                      d="M15.3 21.0396C12.69 22.4096 9.61998 22.8895 6.71998 22.3795C4.94998 22.0695 3.17 21.35 2 19.98C0.830005 18.61 0.439988 16.4793 1.41999 14.9693C2.13999 13.8593 3.47003 13.25 4.78003 13.15C6.09003 13.05 7.41002 13.3992 8.64002 13.8892C10.18 14.4992 11.64 15.3095 13.05 16.1695C14.58 17.1095 16.14 18.1891 16.91 19.8091"
                      // fill="white"
                    />
                    <path
                      className="flower-red-dot"
                      d="M19.63 24.1201C22.8277 24.1201 25.42 21.5278 25.42 18.3301C25.42 15.1323 22.8277 12.54 19.63 12.54C16.4323 12.54 13.84 15.1323 13.84 18.3301C13.84 21.5278 16.4323 24.1201 19.63 24.1201Z"
                      // fill="#EC1C24"
                    />
                  </svg>

